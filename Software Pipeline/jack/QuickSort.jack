class QuickSort {
    function void calculate_quick_sort() {
        var Array arr;
        var int size, i;
        var int newI;
        var String enterSize, enterElements, theSortedArray,emptyString,comma;
        let enterSize = "Size: ";
        let enterElements = "Elements: ";
        let theSortedArray = "Sorted: ";
        let comma = ", ";
        let emptyString = "";
        let size = Keyboard.readInt(enterSize); // Read user input for array size
        let arr = Array.new(size); // Create a new array of the specified size
        // Initialize the array elements with user input
        do Output.printString(enterElements);
        do Output.println();
        let i = 0;
        while (i < size) {
            let newI = i*4;
            let arr[newI] = Keyboard.readInt(emptyString);
            let i = i + 1;
        }

        // Perform QuickSort on the array
        do QuickSort.sort(arr, 0, size - 1);

        // Print the sorted array
        do Output.printString(theSortedArray);
        let i = 0;
        while (i < size) {
            let newI = i*4;
            do Output.printInt(arr[newI]);
            let i = i + 1;
            if (i < size) {
                do Output.printString(comma);
            } else {
                do Output.println();
            }
        }
        return;
    }

    function void sort(Array arr, int low, int high) {
        var int pi;
        if (low < high) {
            let pi = QuickSort.partition(arr, low, high);

            // Recursively sort elements before and after partition
            do QuickSort.sort(arr, low, pi - 1);
            do QuickSort.sort(arr, pi + 1, high);
        }
        return;
    }

    function int partition(Array arr, int low, int high) {
        var int pivot, i, j, temp;
        var int newHigh,newJ,newI;
        var int tempI;
        let newHigh=high*4;
        let pivot = arr[newHigh];
        let i = low - 1;
        let j = low;
        
        while (j < high) {
            let newJ=j*4;
            if (arr[newJ] < pivot) {
                let i = i + 1;
                let newI=i*4;
                let newJ=j*4;
                let temp = arr[newI];
                let arr[newI] = arr[newJ];
                let arr[newJ] = temp;
            }
            let j = j + 1;
        }
        let tempI = i+1;
        let tempI = tempI*4;
        let newHigh = high*4;
        let temp = arr[tempI];
        let arr[tempI] = arr[newHigh];
        let arr[newHigh] = temp;
        return i + 1;
    }
    function void main(){
        do QuickSort.calculate_quick_sort();
        return;

    }
}