// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Output.jack

// screen is 640 x 480 pixels. 480 rows and 640 columns
 // each bit in memory represents 4 pixels on screen
 // memory required = 640 x 480 / 4 = 76800 bits  = 2400 memory addresses (each address of size 32 bits)
 // each horizontal line with 640 pixels will be stored in 10 memory addresses =  320 bits


/**
 * Handles writing characters to the screen.
 * The text screen (240 rows and 320 columns) is divided into 240 text rows (0..239), 
 * each containing  text columns (0..319).
 */

 /**
 * --------------EXPLANATION------------------------
 * each character is 8 bits wide and 8 bits high
 * each horizontal line can have 40 characters (320  screen width / 8 bits width per character = 40 characters)
 * the screen can accomodate 30 horizontal lines ( 240 pixels screen height / height of 8 pixels per line  = 30 lines)
 *
 * each character is represented by 8 integers
 * each integer is 8 bits wide 
 * the first integer represents the top row of the character, and 8th integer represents the bottom row of the character
 */
 
 // Binary 8 bit on screen: [2^0th bit] [2^1 bit] [2^2 bit] [2^3 bit] [2^4 bit] [2^5 bit] [2^6 bit] [2^7 bit] from left to right on screen

class Output {

    // Character map for printing on the left of a screen word
    static Array charMaps; 
    
    static int cursorX, cursorY;
    
    static Array screen,screen2;

    /** Initializes the screen and locates the cursor at the screen's top-left. */
    function void init() {
        var int temp1;
        let temp1 = Math.twoToThe(12);
        let temp1 = 34*temp1;
        let temp1 = temp1 + 1408;
        let screen = 0-temp1; // starting memory address of the screen array
        let screen2 =  16384;
        let cursorX = 0;
        let cursorY = 0;
     
        // let screen[400] = 767;
        // let screen[404] = 768;
        // let screen[408] = 769;
        do Output.initMap(); // function call to initialize the character map array
        return;
    }

    // Initalizes the character map array
    // ----------------------------------------- ACTUAL TESTING DONE ------------------------------------------------------
    function void initMap() {
        var int i;
    
        let charMaps = Array.new(127);

        // 8 x 8 pixel bitmaps for the ASCII character set
        
        // black square (used for non printable characters)
        
        do Output.create(0,63,63,63,63,63,63,0,0);

        // Assigns the bitmap for each character in the ASCII character set.

        // The first 32 characters are non printable characters

        // The next 95 characters are printable characters

        // // space character
        do Output.create(32, 0, 0,  0,  0,  0,  0,  0,  0);         //  
        do Output.create(33, 24, 60,  60,  24,  24,  0,  24,  0);         // !
        do Output.create(34, 108, 108,  0,  0,  0,  0,  0,  0);         // "
        do Output.create(35, 108, 108,  254,  108,  254,  108,  108,  0);         // #
        do Output.create(36, 48, 124,  192,  120,  12,  248,  48,  0);         // $
        do Output.create(37, 0, 198,  204,  24,  48,  102,  198,  0);         // %
        do Output.create(38, 56, 108,  56,  118,  220,  204,  118,  0);         // &
        do Output.create(39, 96, 96,  192,  0,  0,  0,  0,  0);         // '
        do Output.create(40, 24, 48,  96,  96,  96,  48,  24,  0);         // (
        do Output.create(41, 96, 48,  24,  24,  24,  48,  96,  0);         // )
        do Output.create(42, 0, 102,  60,  255,  60,  102,  0,  0);         // *
        do Output.create(43, 0, 48,  48,  252,  48,  48,  0,  0);         // +
        do Output.create(44, 0, 0,  0,  0,  0,  48,  48,  96);         // ,
        do Output.create(45, 0, 0,  0,  252,  0,  0,  0,  0);         // -
        do Output.create(46, 0, 0,  0,  0,  0,  48,  48,  0);         // .
        do Output.create(47, 6, 12,  24,  48,  96,  192,  128,  0);         // /
        do Output.create(48, 124, 198,  206,  222,  246,  230,  124,  0);         // 0
        do Output.create(49, 48, 112,  48,  48,  48,  48,  252,  0);         // 1
        do Output.create(50, 120, 204,  12,  56,  96,  204,  252,  0);         // 2
        do Output.create(51, 120, 204,  12,  56,  12,  204,  120,  0);         // 3
        do Output.create(52, 28, 60,  108,  204,  254,  12,  30,  0);         // 4
        do Output.create(53, 252, 192,  248,  12,  12,  204,  120,  0);         // 5
        do Output.create(54, 56, 96,  192,  248,  204,  204,  120,  0);         // 6
        do Output.create(55, 252, 204,  12,  24,  48,  48,  48,  0);         // 7
        do Output.create(56, 120, 204,  204,  120,  204,  204,  120,  0);         // 8
        do Output.create(57, 120, 204,  204,  124,  12,  24,  112,  0);         // 9
        do Output.create(58, 0, 48,  48,  0,  0,  48,  48,  0);         // :
        do Output.create(59, 0, 48,  48,  0,  0,  48,  48,  96);         // ;
        do Output.create(60, 24, 48,  96,  192,  96,  48,  24,  0);         // <
        do Output.create(61, 0, 0,  252,  0,  0,  252,  0,  0);         // =
        do Output.create(62, 96, 48,  24,  12,  24,  48,  96,  0);         // >
        do Output.create(63, 120, 204,  12,  24,  48,  0,  48,  0);         // ?
        do Output.create(64, 124, 198,  222,  222,  222,  192,  120,  0);         // @
        do Output.create(65, 48, 120,  204,  204,  252,  204,  204,  0);         // A
        do Output.create(66, 252, 102,  102,  124,  102,  102,  252,  0);         // B
        do Output.create(67, 60, 102,  192,  192,  192,  102,  60,  0);         // C
        do Output.create(68, 248, 108,  102,  102,  102,  108,  248,  0);         // D
        do Output.create(69, 254, 98,  104,  120,  104,  98,  254,  0);         // E
        do Output.create(70, 254, 98,  104,  120,  104,  96,  240,  0);         // F
        do Output.create(71, 60, 102,  192,  192,  206,  102,  62,  0);         // G
        do Output.create(72, 204, 204,  204,  252,  204,  204,  204,  0);         // H
        do Output.create(73, 120, 48,  48,  48,  48,  48,  120,  0);         // I
        do Output.create(74, 30, 12,  12,  12,  204,  204,  120,  0);         // J
        do Output.create(75, 230, 102,  108,  120,  108,  102,  230,  0);         // K
        do Output.create(76, 240, 96,  96,  96,  98,  102,  254,  0);         // L
        do Output.create(77, 198, 238,  254,  254,  214,  198,  198,  0);         // M
        do Output.create(78, 198, 230,  246,  222,  206,  198,  198,  0);         // N
        do Output.create(79, 56, 108,  198,  198,  198,  108,  56,  0);         // O
        do Output.create(80, 252, 102,  102,  124,  96,  96,  240,  0);         // P
        do Output.create(81, 120, 204,  204,  204,  220,  120,  28,  0);         // Q
        do Output.create(82, 252, 102,  102,  124,  108,  102,  230,  0);         // R
        do Output.create(83, 120, 204,  224,  112,  28,  204,  120,  0);         // S
        do Output.create(84, 252, 180,  48,  48,  48,  48,  120,  0);         // T
        do Output.create(85, 204, 204,  204,  204,  204,  204,  252,  0);         // U
        do Output.create(86, 204, 204,  204,  204,  204,  120,  48,  0);         // V
        do Output.create(87, 198, 198,  198,  214,  254,  238,  198,  0);         // W
        do Output.create(88, 198, 198,  108,  56,  56,  108,  198,  0);         // X
        do Output.create(89, 204, 204,  204,  120,  48,  48,  120,  0);         // Y
        do Output.create(90, 254, 198,  140,  24,  50,  102,  254,  0);         // Z
        do Output.create(91, 120, 96,  96,  96,  96,  96,  120,  0);         // [
        do Output.create(92, 192, 96,  48,  24,  12,  6,  2,  0);         // \
        do Output.create(93, 120, 24,  24,  24,  24,  24,  120,  0);         // ]
        do Output.create(94, 16, 56,  108,  198,  0,  0,  0,  0);         // ^
        do Output.create(95, 0, 0,  0,  0,  0,  0,  0,  255);         // _
        do Output.create(96, 48, 48,  24,  0,  0,  0,  0,  0);         // `
        do Output.create(97, 0, 0,  120,  12,  124,  204,  118,  0);         // a
        do Output.create(98, 224, 96,  96,  124,  102,  102,  220,  0);         // b
        do Output.create(99, 0, 0,  120,  204,  192,  204,  120,  0);         // c
        do Output.create(100, 28, 12,  12,  124,  204,  204,  118,  0);         // d
        do Output.create(101, 0, 0,  120,  204,  252,  192,  120,  0);         // e
        do Output.create(102, 56, 108,  96,  240,  96,  96,  240,  0);         // f
        do Output.create(103, 0, 0,  118,  204,  204,  124,  12,  248);         // g
        do Output.create(104, 224, 96,  108,  118,  102,  102,  230,  0);         // h
        do Output.create(105, 48, 0,  112,  48,  48,  48,  120,  0);         // i
        do Output.create(106, 12, 0,  12,  12,  12,  204,  204,  120);         // j
        do Output.create(107, 224, 96,  102,  108,  120,  108,  230,  0);         // k
        do Output.create(108, 112, 48,  48,  48,  48,  48,  120,  0);         // l
        do Output.create(109, 0, 0,  204,  254,  254,  214,  198,  0);         // m
        do Output.create(110, 0, 0,  248,  204,  204,  204,  204,  0);         // n
        do Output.create(111, 0, 0,  120,  204,  204,  204,  120,  0);         // o
        do Output.create(112, 0, 0,  220,  102,  102,  124,  96,  240);         // p
        do Output.create(113, 0, 0,  118,  204,  204,  124,  12,  30);         // q
        do Output.create(114, 0, 0,  220,  118,  102,  96,  240,  0);         // r
        do Output.create(115, 0, 0,  124,  192,  120,  12,  248,  0);         // s
        do Output.create(116, 16, 48,  124,  48,  48,  52,  24,  0);         // t
        do Output.create(117, 0, 0,  204,  204,  204,  204,  118,  0);         // u
        do Output.create(118, 0, 0,  204,  204,  204,  120,  48,  0);         // v
        do Output.create(119, 0, 0,  198,  214,  254,  254,  108,  0);         // w
        do Output.create(120, 0, 0,  198,  108,  56,  108,  198,  0);         // x
        do Output.create(121, 0, 0,  204,  204,  204,  124,  12,  248);         // y
        do Output.create(122, 0, 0,  252,  152,  48,  100,  252,  0);         // z

                
        do Output.create(123, 28, 48,  48,  224,  48,  48,  28,  0);         // {
        do Output.create(124, 24, 24,  24,  0,  24,  24,  24,  0);         // |
        do Output.create(125, 224, 48,  48,  28,  48,  48,  224,  0);         // }
        do Output.create(126, 118, 220,  0,  0,  0,  0,  0,  0);         // ~

        return;
    }

    // Creates a character map array of the given char index with the given values.
    // index is the index of the character in the ASCII table.
    // ----------------------------------------- ACTUAL TESTING DONE ------------------------------------------------------
    function void create(int index, int a, int b, int c, int d, int e,
                 int f, int g, int h) {
        var Array map;

        let map = Array.new(8); // creates an array of size 11
        
        // --------------------- Multiply with 4 ------------------- Should be changed ------------------------ 
        let index = index*4;

        let charMaps[index] = map; // assigns the array to the charMaps array at the given index

        // assigns the given pixel values to the array
        let map[0] = a;
        let map[4] = b;
        let map[8] = c;
        let map[12] = d;
        let map[16] = e;
        let map[20] = f;
        let map[24] = g;
        let map[28] = h;
        return;
    }
    
    // Returns the character map (array of size 11) for the given character
    // If an invalid character is given, returns the character map of a black square.
    // ----------------------------------------- ACTUAL TESTING DONE ------------------------------------------------------
    function Array getMap(char c) {
        // --------------------- Multiply with 4 ------------------- Should be changed ------------------------
        var int d;
        if ((c < 32) | (c > 126)) {
            let c = 0;
        }
        let d = c+c+c+c;
        return charMaps[d];
    }

    /** Moves the cursor to the jth column of the ith row,
     *  and erases the character that was there. */
    
    // ----------------------------------------- ACTUAL TESTING DONE ------------------------------------------------------
    function void moveCursor(int i, int j) {
        let cursorX = j;
        let cursorY = i;
        return;
    }

    /** Prints char c at the cursor location and advances the cursor one
     *  column forward. */
    //reference:https://github.com/havivha/Nand2Tetris/blob/master/12/Output.jack

    // ----------------------------------------- ACTUAL TESTING DONE ------------------------------------------------------
    function void printChar(char c) {
        var Array map;
        var int address,mask,bitmap,i,newi,newaddress,temp1,temp2,temp3,temp4;
        
        // Get the character bitmap
        let map = Output.getMap(c);

        /** 
         *  320 columns of horizontal line can be stored in 10 contiguous memory locations each of size 32 bit
         *  320 = 10 *32
         *  Number of memory locations required to store 1 horizontal line  = 10
         *  Number of memory locations required to store 1 horizontal line if 1 character (each of height 8) = 10 * 8 = 80
         *  Number of memory locations required to store "cursorY" horizontal lines of characters = cursorY * 10 * 8
         *
         *  width of each character is 8 bits, so 4 characters can be stored in 1 memory location of size 32 bits
         *  Number of memory locations required to store cursorX number of characters = cursorX / 4
         *
         * 0 <= cursorX <= 39
         * 0 <= cursorY <= 29
         *
         * NOTE: ALL THESE MIGHT NEED TO BE CHANGED TO 32 BIT MEMORY LOCATIONS ACCORDING TO OUR PROCESSOR
        */

        let address = (cursorY*10*8) + (cursorX/4); //  the memory address where the character should be printed on the screen.
        

        // Since the word size of the screen is 32 bits, we need to mask the character bitmap accordingly
        // mask indicates whether the 8 bit character bit stream should be printed on the left or right of the 16 bit screen word

        let mask = cursorX & 3;

        // store the character bitmap in the screen memory location based on the mask
        // | 31 - 24 | 23 - 16 | 15 - 8 | 7 - 0 |  (32 bit screen word)
        // | mask 3  | mask 2  | mask 1 | mask 0|
        
        // Print the character
        let i = 0;
        while( i < 8 ) {
            let newi = i*4;
            let bitmap = map[newi];
            let newaddress = address*4;
            
            /** if( mask = 1 ) {
                let bitmap = bitmap * 256; // left 8 bits would be filled i.e. binary is shifted 8 bits to the left => yyyyyyyy00000000

                // -1 & 255 = 1111111111111111 & 0000000011111111 = 0000000011111111 = 255
                // screen[address] & 255 = screen[address] & 0000000011111111 = 00000000xxxxxxxx (left 8 bits are made 0 and right 8 bits are preserved)
                // 00000000xxxxxxxx | bitmap  = yyyyyyyyxxxxxxxx (left 8 bits are filled with the character bitmap and right 8 bits are preserved)
                let screen[address] = screen[address] & (-1 & 255) | bitmap;
            }else{

                // if the mask is 0, the character should be printed on the right 8 bits of the 16bit screen word
                // !!!!! IMPNOTE: here screen[address] = screen[address] & (-256) might need to be used !!!!!
                // screen[address] & -256 = screen[address] & 1111111100000000 = xxxxxxxx00000000 (right 8 bits are made 0 and left 8 bits are preserved)
                // xxxxxxxx00000000 | bitmap = xxxxxxxxyyyyyyyy (right 8 bits are filled with the character bitmap and left 8 bits are preserved)
                let screen[address] = screen[address] & 255 | bitmap;
            }*/
            
            if( mask = 0) {
                let temp3 = Math.twoToThe(24);
                let bitmap = bitmap * Math.twoToThe(24); //  16777216 = b'00000001 00000000 00000000 00000000
                let temp3 = temp3 - 1;
                let temp4 = (screen2[newaddress] & (temp3)) | bitmap;
                let screen[newaddress] = temp4;  // 16777215 = b'00000000 11111111 11111111 11111111
                let screen2[newaddress] = temp4;  // 16777215 = b'00000000 11111111 11111111 11111111
                // do Output.create(65,0, 8, 20, 34, 62, 34, 34, 0); // A
            }else {
                if( mask = 1 ){
                    let temp1 = Math.twoToThe(24) - Math.twoToThe(16); // 16711680 = b'00000000 11111111 00000000 00000000
                    let temp3 = 0-temp1;
                    let temp3 = temp3-1;
                    let bitmap = bitmap * Math.twoToThe(16); // 65536 = b'00000000 00000001 00000000 00000000
                    let bitmap = bitmap & temp1; // 16711680 = b'00000000 11111111 00000000 00000000
                    let temp4 = (screen2[newaddress] & (temp3)) | bitmap;
                    let screen[newaddress] = temp4; // -16711681 = b'11111111 00000000 11111111 11111111 (4278255615 un-signed int) 
                    let screen2[newaddress] = temp4; // -16711681 = b'11111111 00000000 11111111 11111111 (4278255615 un-signed int)
                }
                else {
                    if( mask = 2 ){
                        let temp2 = Math.twoToThe(16) - Math.twoToThe(8); // 65280 = b'00000000 00000000 11111111 00000000
                        let temp3 = 0-temp2;
                        let temp3 = temp3-1;
                        let bitmap = bitmap * Math.twoToThe(8); // 256 = b'00000000 00000000 00000001 00000000
                        let bitmap = bitmap & temp2; // 65280 = b'00000000 00000000 11111111 00000000
                        let temp4 = (screen2[newaddress] & (temp3)) | bitmap;
                        let screen[newaddress] = temp4; // -65281 = b'11111111 11111111 00000000 11111111 (4294902015 un-signed int) 
                        let screen2[newaddress] = temp4; // -65281 = b'11111111 11111111 00000000 11111111 (4294902015 un-signed int)
                    }
                    else {
                        let temp4 = (screen2[newaddress] & (-256)) | bitmap; // -256 = b'11111111 11111111 11111111 00000000
                        let screen[newaddress] = temp4; // -256 = b'11111111 11111111 11111111 00000000
                        let screen2[newaddress] = temp4; // -256 = b'11111111 11111111 11111111 00000000
                    }
                }
            }
            
            
            let address = address + 10;
            let i = i + 1;
        }
        
        // Advance the cursor
        if( cursorX = 39 ) {
            do Output.println();
        }
        else {
            do Output.moveCursor(cursorY,cursorX+1);
        }
        
        return;
    }

    /** Prints s starting at the cursor location, and advances the
     *  cursor appropriately. */
    // ----------------------------------------- MANUAL TESTING YET TO BE DONE ------------------------------------------------------
    function void printString(String s) {
        var int i;
        let i = 0;
        while( i < s.length() ) {
            do Output.printChar(s.charAt(i)); // prints each character of the string at the given cursor index
            let i = i + 1;
        }
        return;
    }

    /** Prints i starting at the cursor location, and advances the
     *  cursor appropriately. */
    // ----------------------------------------- MANUAL TESTING YET TO BE DONE ------------------------------------------------------
    function void printInt(int i) {
        var String s;
        let s = String.new(10); // Constructs a new empty String with a maximum length of 10.
        do s.setInt(i); // assigns the integer to the string, Sets this String to hold a representation of the given number
        do Output.printString(s); // prints the string
        do s.dispose(); // frees the memory allocated for the string
        return;
    }

    /** Advances the cursor to the beginning of the next line. */

    // ----------------------------------------- MANUAL TESTING DONE ------------------------------------------------------
    function void println() {

        if( cursorY < 29 ) {

            // if the cursor is not at the end line of the screen, move it to the beginning of the next line
            do Output.moveCursor(cursorY+1,0);
        }else {

            // if the cursor is at the end line of the screen, move it to the beginning of the screen
            do Output.moveCursor(0,0);
        }
        return;
    }

    // ----------------------------------------- MANUAL TESTING DONE ------------------------------------------------------
    /** Moves the cursor one column back. */
    function void backSpace() {
        var int address, i, mask, newi, newaddress, temp1, temp2, temp3, temp4;
        if( cursorX = 0 ) {

            // if the cursor is at the beginning of the current line, move it to the end of the previous line
            if( ~(cursorY = 0) ) {
                do Output.moveCursor((cursorY-1),39);
            }

            // if the cursor is the beginning of the screen (top left), do nothing
        }
        else {
            // move the cursor one column back in the same line
            do Output.moveCursor(cursorY,(cursorX-1));
        }
        
        let address = (cursorY*10*8) + (cursorX/4); //  the memory address where the character should be printed on the screen.
        let mask = cursorX & 3;
        let i = 0;
        
        while(i < 8){
            let newi = i*4;
            let newaddress = address*4;

            if( mask = 0) {
                let temp3 = Math.twoToThe(24) - 1;
                let temp4 = (screen2[newaddress] & (temp3));
                let screen[newaddress] = temp4;  // 16777215 = b'00000000 11111111 11111111 11111111
                let screen2[newaddress] = temp4;  // 16777215 = b'00000000 11111111 11111111 11111111
                // do Output.create(65,0, 8, 20, 34, 62, 34, 34, 0); // A
            }else {
                if( mask = 1 ){
                    let temp1 = Math.twoToThe(24) - Math.twoToThe(16); // 16711680 = b'00000000 11111111 00000000 00000000
                    let temp3 = 0-temp1;
                    let temp3 = temp3-1;
                    let temp4 = (screen2[newaddress] & (temp3));
                    let screen[newaddress] = temp4; // -16711681 = b'11111111 00000000 11111111 11111111 (4278255615 un-signed int) 
                    let screen2[newaddress] = temp4; // -16711681 = b'11111111 00000000 11111111 11111111 (4278255615 un-signed int)
                }
                else {
                    if( mask = 2 ){
                        let temp2 = Math.twoToThe(16) - Math.twoToThe(8); // 65280 = b'00000000 00000000 11111111 00000000
                        let temp3 = 0-temp2;
                        let temp3 = temp3-1;
                        let temp4 = (screen2[newaddress] & (temp3));
                        let screen[newaddress] = temp4; // -65281 = b'11111111 11111111 00000000 11111111 (4294902015 un-signed int) 
                        let screen2[newaddress] = temp4; // -65281 = b'11111111 11111111 00000000 11111111 (4294902015 un-signed int)
                    }
                    else {
                        let temp4 = (screen2[newaddress] & (-256)); // -256 = b'11111111 11111111 11111111 00000000
                        let screen[newaddress] = temp4; // -256 = b'11111111 11111111 11111111 00000000
                        let screen2[newaddress] = temp4; // -256 = b'11111111 11111111 11111111 00000000
                    }
                }
            }

            let i = i+1;
        }

        return;
    }
    // Can add space bar function also
}