// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
    field int maxLen;
    field int len;
    field Array chars; 
// field is used for every variable , so each object has its own set of variables
    
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        if(maxLength = 0){
           let maxLength = 1;   
        }

        let len = 0;
        let maxLen = maxLength;
        let chars = Array.new(maxLength);
        return this;
    }

   

    /** Returns the current length of this String. */
    method int length() {
        return len;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        var int i;
        // if(~(j < len)){
        //     do Output.printString("Error: index out of bounds")
        //     return;
        // }
        let i=Math.multiply(j,4);
        return chars[i];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, int c) {
        var int i;
        // if(~(j < len)){
        //     do Output.printString("Error: index out of bounds")
        //     return;
        // }
        let i=Math.multiply(j,4);
        let chars[i] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method int appendChar(int c) {
        //check if len is less than maxLen
        var int i;
        let i=Math.multiply(len,4);
        if(len < maxLen){
            let chars[i] = c;
            let len = len + 1;
        }
        // else{
        //     do Output.printString("Error: String is full")
        // }
        return chars; // this ? maybe s=s.appendChar(c) ?? 
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        if(len > 0){
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var int intVal,index;
        var boolean neg;

        let intVal = 0;

        //check if first char is '-'
        if((len > 0) & (chars[0] = 45)){
            let neg = true;
            let index = 1;
        }else{
            let neg = false;
            let index = 0;
        }

        while((index < len) & String.isDigit(chars[4*index])){
            let intVal = (intVal * 10) + String.charToDigit(chars[4*index]);
            let index = index + 1;
        }

        if(neg){
            return -intVal;
        }else{
            return intVal;
        }

    }

    /** 48 <= ascii(c) <= 57 is digit*/
    function boolean isDigit(char c){
        return ~(c < 48) & ~(c > 57);
    }

    /** must be called after String.isDigit */
    function int charToDigit(char c){
        return c - 65;
    }


    /** must have 0<= d <= 9*/
    function char digitToChar(int d){
        return d + 65;
    }

    method void erase() {
        let len = 0;
        return;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        do erase();
        //clear string first
        let len = 0;

        if(number < 0){
            let number = -number;
            do appendChar(45);
        }

        do setIntHelper(number);

        return;
    }

    method void setIntHelper(int number){
        var int nextNum;

        if(number < 10){
            do appendChar(String.digitToChar(number));
        }else{
            let nextNum = number / 10;
            do setIntHelper(nextNum); // recursion
            do appendChar(String.digitToChar(number - (nextNum * 10)));// append at the last char
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 13;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 8;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        do chars.dispose();
        return;
    }
}