// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */
 class Memory {
    static Array memory;
    static Array freeList;
    static Array memoryBottom;

    static int heapBottom;//16384
    static int heapBase;//2048

    static int heapBottomAddress;
    static int heapBaseAddress;

    static int LENGTH;//the segment's length
    static int NEXT;//pointer to the next segment in the list

    static int ALLOC_LENGTH; //the alloc block's length
    static int TEmp;
    static int bra;

    /** Initializes memory parameters. */
    function void init() {

        let heapBaseAddress = 8192;
        let heapBottomAddress = 16384;

        let heapBase = 2048;
        let heapBottom = 16384;

        let memory = 0;//memory base
        let freeList = heapBaseAddress;//heap base
        let LENGTH = 0;
        let NEXT = 4;
        let freeList[LENGTH] = heapBottom - heapBase;//which is 16384 - 2048
        let freeList[NEXT] = null;

        let ALLOC_LENGTH = -4;//block[-1] store the length of alloc block

        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        let address=address+address;
        let address=address+address;
        return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        let address=address+address;
        let address=address+address;
        let memory[address] = value;
        return;
    }

    function int val(){
        return freeList;
    }

    function int Tval(){
        return TEmp;
    }

    function int Bval(){
        return bra;
    }

    function Array bestFit(int size){
        var Array curBlock, bestBlock;
        var int bestSize,curSize;

        let bestBlock = null;//init null
        let bestSize = heapBottom - heapBase;
        let curBlock = freeList;

        if(curBlock[NEXT] = null){
            return curBlock; //*** curBlock
        }

        while(~(curBlock = null)){

            let curSize = curBlock[LENGTH] - 1; //alloced block only need one header

            if(~(curSize < size) & (curSize < bestSize)){

                let bestBlock = curBlock;
                let bestSize = curSize;

            }

            let curBlock = curBlock[NEXT];
        }

        return bestBlock;
    }

    /** finds and allocates from the heap a memory block of the
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {

        var Array foundBlock,nextBlock,result;

        let foundBlock = Memory.bestFit(size);
        let result = foundBlock + 4;
        let TEmp=result;
        if(~(foundBlock = null)){
            //alloc this block, check if only need to alloc part of this block or the whole block
            if(foundBlock[LENGTH] > (size + 3)){
                let nextBlock = foundBlock+size+size+size+size+4;
                let nextBlock[NEXT] = foundBlock[NEXT];
                let nextBlock[LENGTH] = foundBlock[LENGTH] - size - 1;
                let result[ALLOC_LENGTH] = size + 1;
                let freeList = nextBlock;
                let bra=1;
            }else{
                //alloc the whole block
                let nextBlock = foundBlock[NEXT];
                let result[ALLOC_LENGTH] = foundBlock[LENGTH];
                let bra=2;
            }

        }

        return result; //*********return result
    }
}