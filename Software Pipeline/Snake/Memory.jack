// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */
class Memory {
    static Array memory;
    static Array freeList;
    static Array memoryBottom;

    static int heapBottom;//16384
    static int heapBase;//2048

    static int heapBottomAddress;
    static int heapBaseAddress;

    static int LENGTH;//the segment's length
    static int NEXT;//pointer to the next segment in the list

    static int ALLOC_LENGTH; //the alloc block's length

    //Change: Unnecessary
    static int TEmp;
    static int TEmp1;
    static int bra;

    /** Initializes memory parameters. */
    function void init() {
        //Change:: *4
        let heapBaseAddress = 8192;
        let heapBottomAddress = 16384; //Change::Must be changed when large numbers are allowed
        let heapBottomAddress=heapBottomAddress*4; //Change:: *4
        let heapBase = 2048;
        let heapBottom = 16384;

        let memory = 0;//memory base
        let freeList = heapBaseAddress;//heap base
        let LENGTH = 0;
        let NEXT = 4;//Change:: *4
        let freeList[LENGTH] = heapBottom - heapBase;//which is 16384 - 2048
        let freeList[NEXT] = null;
        
        //Change:: *4
        let ALLOC_LENGTH = -4;//block[-1] store the length of alloc block

        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        let address=address+address; //Change:: *4
        let address=address+address; //Change:: *4
        return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        let address=address+address; //Change:: *4
        let address=address+address; //Change:: *4
        let memory[address] = value;
        return;
    }

    //Change: Unnecessary


    
    function Array bestFit(int size){
        var Array curBlock, bestBlock;
        var int bestSize,curSize;

        let bestBlock = null;//init null
        let bestSize = heapBottom - heapBase;
        let curBlock = freeList;

        if(curBlock[NEXT] = null){
            return curBlock; //*** curBlock
        }

        while(~(curBlock = null)){

            let curSize = curBlock[LENGTH] - 1; //alloced block only need one header

            if(~(curSize < size) & (curSize < bestSize)){

                let bestBlock = curBlock;
                let bestSize = curSize;

            }

            let curBlock = curBlock[NEXT];
        }

        return bestBlock;
    }

    function void deAlloc(int object) {
        // var Array preBlock,nextBlock;
        // var int size;

        // //if there exists pre free block, then link this block to pre block
        // //else let this block be free list head and link to freelist
        // //if pre block clings to this block,join two block together
        //     //else link together

        // let size = object[ALLOC_LENGTH];
        // let object = object + 1;//must consider block[-1]  //changed to object = object +1
        // let preBlock = Memory.findPreFree(object);

        // if(preBlock = null){

        //     let object[LENGTH] = size;
        //     let object[NEXT] = freeList;
        //     let freeList = object;

        // }else{

        //     if((preBlock - preBlock[LENGTH]) = object){

        //         let preBlock[LENGTH] = preBlock[LENGTH] + size;
        //         let object = preBlock;

        //     }else{

        //         let object[LENGTH] = size;
        //         let object[NEXT] = preBlock[NEXT];
        //         let preBlock[NEXT] = object;

        //     }

        // }

        // //after linking, check if this block can be joined to next block
        // if((object - object[LENGTH]) = object[NEXT]){  // changed to object - object[LENGTH] = object[NEXT]
        //     let nextBlock = object[NEXT];
        //     let object[LENGTH] = object[LENGTH] + nextBlock[LENGTH];
        //     let object[NEXT] = nextBlock[NEXT];
        // }

        return;
    } 

    function Array findPreFree(int object){
        var Array preBlock;

        // //no freeBlock
        // if(freeList < object){  // doubt (should change??) Don't need to change - only available free space is being checked  Need to change-If the first free block is after the current object's address ,then there is no free block before the current object 
        //     return null;
        // }

        // let preBlock = freeList;
        // //preBlock.next != null && preBlock.next < object
        // while(~(preBlock[NEXT] = null) & (preBlock[NEXT] > object)){ // change to preBlock[NEXT] > object 
        //     let preBlock = preBlock[NEXT];
        // }

        return preBlock;

    }

    /** finds and allocates from the heap a memory block of the
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {

        var Array foundBlock,nextBlock,result;

        let foundBlock = Memory.bestFit(size);
        let result = foundBlock + 4;
        //Change:: Unnecessary
        let TEmp=result;

        if(~(foundBlock = null)){
            //alloc this block, check if only need to alloc part of this block or the whole block
            if(foundBlock[LENGTH] > (size + 3)){
                let nextBlock = foundBlock+size+size+size+size+4;//Change:: When *4 is fixed
                let nextBlock[NEXT] = foundBlock[NEXT];
                let nextBlock[LENGTH] = foundBlock[LENGTH] - size - 1;
                let result[ALLOC_LENGTH] = size + 1;
                let TEmp1=result; //Change:: Unnecessary
                let freeList = nextBlock; 
                let bra=1;//Change:: Unnecessary
            }else{
                //alloc the whole block
                let nextBlock = foundBlock[NEXT];
                let result[ALLOC_LENGTH] = foundBlock[LENGTH];
                let bra=2;//Change:: Unnecessary
            }

        }

        return result; //*********return result
    }

}