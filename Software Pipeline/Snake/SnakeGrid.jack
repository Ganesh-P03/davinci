
class SnakeGrid {

   
    field SnakeGame game;

  
    field int sizeX, sizeY;

    field int foodX, foodY;


    field Array grid;
    field Array RandomArrayX;
    field Array RandomArrayY;
    field int randomIndex;
    constructor SnakeGrid new(SnakeGame Agame, int Ax, int Ay) {

        let game = Agame;
        let sizeX = Ax / 4;
        let sizeY = (Ay-16) / 4;
        let RandomArrayX = Array.new(10);
        let RandomArrayY = Array.new(10);
        // initialize the grid
        let RandomArrayY[0] = 57;
        let RandomArrayY[4] = 24;
        // let RandomArrayY[2*4] = 83;
        // let RandomArrayY[3*4] = 75;
        // let RandomArrayY[4*4] = 36;
        // let RandomArrayY[5*4] = 99;
        // let RandomArrayY[6*4] = 68;
        // let RandomArrayY[7*4] = 42;
        // let RandomArrayY[8*4] = 90;
        // let RandomArrayY[9*4] = 72;
        let RandomArrayX[0] = 54;
        let RandomArrayX[4] = 43;
        // let RandomArrayX[2*4] = 88;
        // let RandomArrayX[3*4] = 75;
        // let RandomArrayX[4*4] = 87;
        // let RandomArrayX[5*4] = 21;
        // let RandomArrayX[6*4] = 09;
        // let RandomArrayX[7*4] = 66;
        // let RandomArrayX[8*4] = 56;
        // let RandomArrayX[9*4] = 35;
        let randomIndex = 0;
        do initGrid();

        return this;

    }

    // disposes of a SnakeGrid
    method void dispose() {

        // var int curX;
        // var Array xGrid;
        // var int newCurx;
        // let curX = 0;
        // while( curX < sizeX ) {
        //     let newCurx = curX*4;
        //     let xGrid = grid[newCurx];
        //     do xGrid.dispose();
        //     let curX = curX + 1;
        // }
        // do Memory.deAlloc(this);

        return;

    }

    // selects a position for and draws a food pellet
    method void placeFood() {

        var boolean found;
        var int newRandomIndex;
        var int randX, randY;

        // don't place the food on top of a snake piece
        let found = false;
        while( ~found ) {
            let newRandomIndex = randomIndex*4;
            let randX = RandomArrayX[newRandomIndex];
            let randY = RandomArrayY[newRandomIndex];
            let randomIndex = randomIndex + 1;
            if(randomIndex=2){
                let randomIndex = 0;
            }
            if( ~ checkOccupied(randX, randY) ) {
                let found = true;
            }

        }
        let foodX = randX;
        let foodY = randY;

        return;

    }

    // draws the food pellet
    method void drawFood() {

        do Screen.setColor(true);
       do Screen.drawRectangle(foodX*4 +2,foodY*4+2,foodX*4 +4,foodY*4 +4);

        return;
    }

    // initializes the grid
    method void initGrid() {

        var int curX, curY;
        var int newCurX, newCurY;
        var Array xGrid;

        let grid = Array.new(sizeX);
        let curX = 0;

        while( curX < sizeX ) {
            let xGrid = Array.new(sizeY);
            let curY = 0;
            while( curY < sizeY ) {
                let newCurY = curY*4;
                let xGrid[newCurY] = false;
                let curY = curY + 1;
            }
            let newCurX = curX*4;
            let grid[newCurX] = xGrid;
            let curX = curX + 1;
        }

        // draw the horizontal line dividing the game
        // area from the status line
        do Screen.setColor(true);
        do Screen.drawLine(0, (sizeY*4)+1, (sizeX*4-1), (sizeY*4)+1);

        return;

    }

    // reader methods
    method int sizeX() {
        return sizeX;
    }
    method int sizeY() {
        return sizeY;
    }
    method int foodX() {
        return foodX;
    }
    method int foodY() {
        return foodY;
    }

    // grid access methods
    method void setOccupied(int x, int y, boolean occupied) {
        var Array xGrid;
        var int newX, newY;
        let newX = x*4;
        let newY = y*4;
        let xGrid = grid[newX];
        let xGrid[newY] = occupied;
        return;
    }
    method boolean checkOccupied(int x, int y) {
        var Array xGrid;
        var int newX, newY;
        let newX = x*4;
        let newY = y*4;
        let xGrid = grid[newX];
        if( xGrid[newY] ) {
            return true;
        }
        else {
            return false;
        }
    }
    method boolean checkFood(int x, int y) {

        if( x = foodX ) {
            if( y = foodY ) {
                return true;
            }
        }

        return false;

    }

    // debug: puts the cycle, and current X/Y on the status line
    method void debugPosition(int x, int y) {
        do Output.moveCursor(22, 21);
        do Output.printInt(game.getCycle());
        do Output.moveCursor(22, 42);
        do Output.printInt(x);
        do Output.moveCursor(22, 46);
        do Output.printInt(y);
        return;
    }

    // draws a block and marks that block as occupied
    method void drawSnakeBit(int x, int y) {
        do Screen.setColor(true);
        do Screen.drawRectangle( x*4, y*4, (x*4)+4, (y*4)+4 );
        do setOccupied(x, y, true);
        return;
    }

    // clears a block and marks that block as not occupied
    method void clearSnakeBit(int x, int y) {
        do Screen.setColor(false);
        do Screen.drawRectangle( x*4, y*4, (x*4)+4, (y*4)+4 );
        do setOccupied(x, y, false);
        return;
    }

    // draws the status line
    // Level: 0___ [PAUSED*4] #__ Score: 0_______  x__ y__  Length: 0___
    // 0           12       21  25               42  46   52
    method void drawStatus() {

        // var Snake snake;
        // var String tString;

        // do Output.moveCursor(22, 0);
        // let tString = "Level: ";
        // do Output.printString(tString);
        // do tString.dispose();
        // do Output.printInt(game.getLevel());
        // do Output.moveCursor(22, 25);
        // let tString = "Score: ";
        // do Output.printString(tString);
        // do tString.dispose();
        // do Output.printInt(game.getScore());
        // do Output.moveCursor(22, 52);
        // let tString = "Length: ";
        // do Output.printString(tString);
        // do tString.dispose();
        // let snake = game.getSnake();
        // do Output.printInt(snake.getLength());
        // if(game.getPaused()) {
        //     do drawPaused();
        // }
        // else {
        //     do clearPaused();
        // }

        return;

    }
    method void drawPaused() {

        // var String tString;

        // do Output.moveCursor(22, 12);
        // let tString = "[PAUSED*4] ";
        // do Output.printString(tString);
        // do tString.dispose();
        return;

    }
    method void clearPaused() {

        // var String tString;

        // do Output.moveCursor(22, 12);
        // let tString = "         ";
        // do Output.printString(tString);
        // do tString.dispose();

        return;

    }
    method void drawDone() {

        // var String tString;

        // do Output.moveCursor(22, 12);
        // let tString = " [DONE*4]  ";
        // do Output.printString(tString);
        // do tString.dispose();

        return;

    }
    method void drawCrashed() {

        // var String tString;

        // do Output.moveCursor(22, 12);
        // let tString = "*CRASHED*";
        // do Output.printString(tString);
        // do tString.dispose();

        return;

    }


}