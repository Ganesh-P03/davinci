function Output.init 0
push constant 16384
pop static 7
push constant 0
pop static 1
push constant 0
pop static 2
push constant 0
pop static 3
push constant 0
pop static 5
push constant 0
pop static 4
push constant 36
call Array.new 1
pop static 6
call Output.initMap 0
pop temp 0
call Output.createMemoryMappings 0
pop temp 0
push constant 0
return
function Output.initMap 1
push constant 127
call Array.new 1
pop static 0
push constant 48
push constant 62
push constant 67
push constant 69
push constant 73
push constant 81
push constant 97
push constant 62
call Output.create 8
pop temp 0
push constant 49
push constant 8
push constant 24
push constant 40
push constant 8
push constant 8
push constant 8
push constant 127
call Output.create 8
pop temp 0
push constant 50
push constant 127
push constant 1
push constant 1
push constant 127
push constant 64
push constant 64
push constant 127
call Output.create 8
pop temp 0
push constant 65
push constant 127
push constant 65
push constant 65
push constant 65
push constant 127
push constant 65
push constant 65
call Output.create 8
pop temp 0
push constant 66
push constant 126
push constant 65
push constant 65
push constant 126
push constant 65
push constant 65
push constant 126
call Output.create 8
pop temp 0
push constant 67
push constant 127
push constant 65
push constant 65
push constant 65
push constant 65
push constant 65
push constant 127
call Output.create 8
pop temp 0
push constant 68
push constant 124
push constant 70
push constant 67
push constant 67
push constant 67
push constant 70
push constant 124
call Output.create 8
pop temp 0
push constant 0
return
function Output.create 2
push constant 7
call Array.new 1
pop local 0
push argument 0
push argument 0
add
push argument 0
add
push argument 0
add
pop local 1
push local 1
push static 0
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push local 0
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push local 0
add
push argument 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push local 0
add
push argument 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push local 0
add
push argument 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 16
push local 0
add
push argument 5
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 20
push local 0
add
push argument 6
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 24
push local 0
add
push argument 7
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Output.createMemoryMappings 6
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
push constant 0
pop local 3
label WHILE_EXP0
push local 1
push constant 310
lt
not
if-goto WHILE_END0
push local 1
push constant 32
call Math.mod 2
pop local 4
push local 4
push constant 3
call Math.mod 2
pop local 5
push local 5
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 3
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
push static 6
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push constant 4
add
pop local 2
goto IF_END1
label IF_FALSE1
label IF_END1
push local 3
push constant 1
add
pop local 3
push local 3
push constant 3
call Math.mod 2
pop local 3
goto IF_END0
label IF_FALSE0
label IF_END0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Output.getMap 0
push argument 0
push constant 32
lt
push argument 0
push constant 126
gt
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
pop argument 0
goto IF_END2
label IF_FALSE2
label IF_END2
push argument 0
push argument 0
add
push argument 0
add
push argument 0
add
pop argument 0
push argument 0
push static 0
add
pop pointer 1
push that 0
return
function Output.moveCursor 0
push argument 1
pop static 1
push argument 0
pop static 2
push constant 0
return
function Output.power 1
push constant 1
pop local 0
label WHILE_EXP1
push argument 1
push constant 0
gt
not
if-goto WHILE_END1
push local 0
push argument 0
call Math.multiply 2
pop local 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_EXP1
label WHILE_END1
push local 0
return
function Output.printChar 17
push static 3
push static 3
add
push static 3
add
push static 3
add
pop static 5
push static 5
push static 6
add
pop pointer 1
push that 0
pop local 1
push static 4
push constant 100
call Math.multiply 2
push local 1
push constant 32
call Math.divide 2
add
pop local 2
push local 1
push constant 32
call Math.mod 2
pop local 0
push constant 0
pop local 3
push argument 0
call Output.getMap 1
pop local 4
label WHILE_EXP2
push local 3
push constant 7
lt
not
if-goto WHILE_END2
push constant 0
pop local 5
label WHILE_EXP3
push local 5
push constant 7
lt
not
if-goto WHILE_END3
push local 5
push local 5
add
push local 5
add
push local 5
add
pop local 15
push local 15
push local 4
add
pop pointer 1
push that 0
pop local 6
push local 2
push local 2
add
push local 2
add
push local 2
add
pop local 16
push local 16
push static 7
add
pop pointer 1
push that 0
pop local 8
push constant 31
push local 0
sub
pop local 7
push constant 2
push local 7
call Output.power 2
pop local 9
push local 8
push local 9
call Math.divide 2
pop local 10
push local 10
push constant 1
and
pop local 11
push local 11
push constant 1
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 8
push local 9
sub
pop local 8
goto IF_END3
label IF_FALSE3
label IF_END3
push constant 6
push local 3
sub
pop local 12
push constant 2
push local 12
call Output.power 2
pop local 13
push local 6
push local 13
call Math.divide 2
pop local 14
push local 14
push constant 1
and
pop local 11
push local 11
push constant 1
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 8
push local 9
add
pop local 8
goto IF_END4
label IF_FALSE4
label IF_END4
push local 16
push static 7
add
push local 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto WHILE_EXP3
label WHILE_END3
push local 0
push constant 1
add
pop local 0
push local 3
push constant 1
add
pop local 3
push local 0
push constant 32
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
pop local 0
push local 2
push constant 1
add
pop local 2
goto IF_END5
label IF_FALSE5
label IF_END5
goto WHILE_EXP2
label WHILE_END2
push static 3
push constant 35
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 0
pop static 3
push static 4
push constant 1
add
pop static 4
goto IF_END6
label IF_FALSE6
push static 3
push constant 1
add
pop static 3
label IF_END6
push constant 0
return
function Output.println 0
push constant 0
pop static 3
push static 4
push constant 1
add
pop static 4
push constant 0
return
function Output.backSpace 13
push static 3
push static 3
add
push static 3
add
push static 3
add
pop static 5
push static 5
push static 6
add
pop pointer 1
push that 0
pop local 1
push static 4
push constant 100
call Math.multiply 2
push local 1
push constant 32
call Math.divide 2
add
pop local 2
push local 1
push constant 32
call Math.mod 2
pop local 0
push constant 0
pop local 3
push static 3
push constant 0
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push static 4
push constant 0
gt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push static 4
push constant 1
sub
pop static 4
push constant 35
pop static 3
goto IF_END8
label IF_FALSE8
label IF_END8
goto IF_END7
label IF_FALSE7
push static 3
push constant 1
sub
pop static 3
label IF_END7
label WHILE_EXP4
push local 3
push constant 7
lt
not
if-goto WHILE_END4
push constant 0
pop local 4
label WHILE_EXP5
push local 4
push constant 7
lt
not
if-goto WHILE_END5
push local 4
push local 4
add
push local 4
add
push local 4
add
pop local 12
push local 2
push local 2
add
push local 2
add
push local 2
add
pop local 11
push local 11
push static 7
add
pop pointer 1
push that 0
pop local 7
push constant 31
push local 0
sub
pop local 6
push constant 2
push local 6
call Output.power 2
pop local 8
push local 7
push local 8
call Math.divide 2
pop local 9
push local 9
push constant 1
and
pop local 10
push local 10
push constant 1
eq
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push local 7
push local 8
sub
pop local 7
goto IF_END9
label IF_FALSE9
label IF_END9
push local 11
push static 7
add
push local 7
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto WHILE_EXP5
label WHILE_END5
push local 0
push constant 1
add
pop local 0
push local 3
push constant 1
add
pop local 3
push local 0
push constant 32
eq
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push constant 0
pop local 0
push local 2
push constant 1
add
pop local 2
goto IF_END10
label IF_FALSE10
label IF_END10
goto WHILE_EXP4
label WHILE_END4
push constant 0
return