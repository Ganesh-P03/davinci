// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */

 // screen is 640 x 480 pixels. 480 rows and 640 columns
 // each bit in memory represents 4 pixels on screen
 // memory required = 640 x 480 / 4 = 76800 bits  = 2400 memory addresses (each address of size 32 bits)
 // each horizontal line with 640 pixels will be stored in 10 memory addresses =  640/2 = 320 bits = 10 addresses
 // each vertical line will have 480 pixels with (480 /2 ) 240 rows 

// 1 bit = 2 horizontal + 2 vertical pixels
/**
 *0,0 is top left corner
 *
 *0 1 2 . . . . . . 319
 *1
 *2
 *.
 *.
 *.
 *239
 *
 *(x,y) refers to xth column and yth row
 *
 * 4 pixels will be represented by 1 bit
 * Size of screen in memory is 2400. Each address will store 32 pixels
 * Let characters be 8 x 8 bit matrix 
 * Screen can accomodate (320 / 8) = 40 characters in a row and (240 / 8) = 30 characters in a column => 40 x 30 = 1200 characters
 *
 */
 
class Screen {
    static Array screen;
    static boolean color; //true for black, false for white


    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the whole screen. */

    //  Size of screen 480*640, One bit will fill 4 pixels, so size of screen in memory is 480*640/4 = 76800. Each address will store 32 bits. So one address will store 32*4 pixels
    //  No. of registers to be used for screen in memory is 76800/32 = 2400 addresses. 
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 2400){
            let screen[i] = false; // Changing all the pixel values to white
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int address,mask;

        let address = (y * 10) + (x / 32);  // 1 row will be stored in 10 addresses as 10*32=512 (no. of bits in a row), next row will be stored in next 10 addresses
         /**
           *yth row starting address will be 10*y
           *xth column pixel will be one of the 10*y+(x/32)th address's 16 bits
         */

        //  Below code is to findout exact bit to be changed in the address

        let mask = Math.twoToThe(x & 31); // 2^(x%32)
        // mask will be in the format of 00000x0000000000 where position of x varies , position of x is the bit to be changed
        if(color){//color is black
            let screen[address] = screen[address] | mask; // ORing with mask to set the bit to 1 
        }else{//color is white
            let screen[address] = screen[address] & ~mask;// ANDing with mask to set the corresponding bit to 0
        }

        return;

    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, temp, adyMinusbdx;


        // x1 should always be less than equal to x2
        if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;

        //if y coordinates of both points are same , then just draw a horizantal line

        if(dy = 0){

            //draw horizontal line from x1 to x2
            do Screen.drawHLine(x1, x2, y1);

        }else{

            //if x coordinates of both points are same , then just draw a Vertical line
            if(dx = 0){

                //draw vertical line from y1 to y2
                do Screen.drawVLine(x1, y1, y2);
            
            }else{

                //draw diagonal line 
                let adyMinusbdx = 0;

                // dy/dx is the slope of line that we need to draw, b/a is the metric that decides whether we should draw a vertical line or horizantal line
                // if dy/dx < b/a === ady-bdx (adyMinusbdx) < 0 , draw a small hzntl line, else draw a small vertical line
                // Dont know how this code works, alternatively we can use the code in comments below 
                if(y1 < y2){

                    let a = 0;
                    let b = 0;

                    //x++,y++
                    while(~(a > dx) & ~(b > dy)){
                        
                        do Screen.drawPixel(x1 + a, y1 + b);
                        
                        if(adyMinusbdx > 0){
                            let a = a + 1;
                            let adyMinusbdx = adyMinusbdx - dx;
                        }else{
                            let b = b + 1;
                            let adyMinusbdx = adyMinusbdx + dy;
                        }

                    }
                    
                }else{
                
                    //x++,y--
                    while(~(a > dx) & ~(b < dy)){
                        
                        do Screen.drawPixel(x1 + a, y1 - b);
                        
                        if(adyMinusbdx > 0){
                            let a = a + 1;
                            let adyMinusbdx = adyMinusbdx - dx;
                        }else{
                            let b = b + 1;
                            let adyMinusbdx = adyMinusbdx + dy;
                        }

                    }
                }
                /**
                if(y1 < y2){

                    let a = 0;
                    let b = 0;

                    //x++,y++
                    while(~(a > dx) & ~(b > dy)){
                        
                        do Screen.drawPixel(x1 + a, y1 + b);
                        
                        if(adyMinusbdx < 0){
                            let a = a + 1;
                            
                        }else{
                            let b = b + 1;
                        }
                        let adyMinusbdx = a*dy-b*dx;

                    }
                    
                }else{
                
                    //x++,y--
                    while(~(a > dx) & ~(b < dy)){
                        
                        do Screen.drawPixel(x1 + a, y1 - b);
                        
                        if(adyMinusbdx <0){
                            let a = a + 1;
                        }else{
                            let b = b + 1;
                        }
                        let adyMinusbdx = a*dy-b*dx;

                    }
                }
                */


            }

        }
        
        return;
    }

    //draw horizontal line from (x1,y) to (x2,y)
    function void drawHLine(int x1, int x2, int y){
        var int temp;

        if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }

        while(~(x2 < x1)){
            do Screen.drawPixel(x1,y);
            let x1 = x1 + 1;
        }

        return;
    }

    //draw vertical line from (x,y1) to (x,y2)
    function void drawVLine(int x, int y1, int y2){
        var int temp;

        if(y1 > y2){
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        while(~(y2 < y1)){
            do Screen.drawPixel(x,y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        //As it is filled rectangle , we can just add horizantal lines from y1 to y2
        while( ~(y1 > y2) ) {
            do Screen.drawHLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int dx, dy;
        var int r_squared;
        // Filled circle is nothing but is group of various horizantal lines from y=-r to y=+r. Length depends on the value of y.
        let dy = -r;
        let r_squared = r*r;
        while( ~(dy > r) ) { // horizantal lines from y=-r to y=+r 
            let dx = Math.sqrt(r_squared-(dy*dy)); // dx = sqrt(r^2 - dy^2)
            do Screen.drawHLine( cx-dx, cx+dx, cy+dy );
            let dy = dy + 1;
        }
        return;
    }
}
