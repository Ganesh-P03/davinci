function Math.init 0
push constant 16
call Array.new 1
pop static 0
push constant 1
push static 0
push constant 0
add
pop pointer 1
pop that 0
push constant 2
push static 0
push constant 1
add
pop pointer 1
pop that 0
push constant 4
push static 0
push constant 2
add
pop pointer 1
pop that 0
push constant 8
push static 0
push constant 3
add
pop pointer 1
pop that 0
push constant 16
push static 0
push constant 4
add
pop pointer 1
pop that 0
push constant 32
push static 0
push constant 5
add
pop pointer 1
pop that 0
push constant 64
push static 0
push constant 6
add
pop pointer 1
pop that 0
push constant 128
push static 0
push constant 7
add
pop pointer 1
pop that 0
push constant 256
push static 0
push constant 8
add
pop pointer 1
pop that 0
push constant 512
push static 0
push constant 9
add
pop pointer 1
pop that 0
push constant 1024
push static 0
push constant 10
add
pop pointer 1
pop that 0
push constant 2048
push static 0
push constant 11
add
pop pointer 1
pop that 0
push constant 4096
push static 0
push constant 12
add
pop pointer 1
pop that 0
push constant 8192
push static 0
push constant 13
add
pop pointer 1
pop that 0
push constant 16384
push static 0
push constant 14
add
pop pointer 1
pop that 0
push constant 16384
push constant 16384
add
push static 0
push constant 15
add
pop pointer 1
pop that 0
push constant 0
return
function Math.bit 0
push argument 0
push static 0
push argument 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_0
goto ENDIF_0
label IF_0
push argument 0
neg
pop argument 0
label ENDIF_0
push argument 0
return
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label WHILE_1
push local 2
push constant 16
lt
not
if-goto END_WHILE_1
push argument 1
push local 2
call Math.bit 2
if-goto IF_2
goto ENDIF_2
label IF_2
push local 0
push local 1
add
pop local 0
label ENDIF_2
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_1
label END_WHILE_1
push local 0
return
function Math.divide 3
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
eq
pop local 2
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 1
push argument 0
gt
if-goto IF_3
goto ENDIF_3
label IF_3
push constant 0
return
label ENDIF_3
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 0
push argument 0
push constant 2
push local 0
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
if-goto IF_4
push local 0
push local 0
add
push constant 1
add
pop local 1
goto ENDIF_4
label IF_4
push local 0
push local 0
add
pop local 1
label ENDIF_4
push local 2
if-goto IF_5
push local 1
neg
return
goto ENDIF_5
label IF_5
push local 1
return
label ENDIF_5
function Math.sqrt 4
push constant 0
pop local 0
push constant 7
pop local 1
label WHILE_6
push local 1
push constant 0
lt
not
not
if-goto END_WHILE_6
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
if-goto IF_7
goto ENDIF_7
label IF_7
push local 2
pop local 0
label ENDIF_7
push local 1
push constant 1
sub
pop local 1
goto WHILE_6
label END_WHILE_6
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_8
goto ENDIF_8
label IF_8
push argument 0
return
label ENDIF_8
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_9
goto ENDIF_9
label IF_9
push argument 0
return
label ENDIF_9
push argument 1
return
function Math.twoToThe 0
push static 0
push argument 0
add
pop pointer 1
push that 0
return
