// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
    
    static Array bitArray;

    /** Initializes the library. */
    function void init() {

        // NOTE : NEED TO BE MODIFIED TO 32 BIT INSTEAD OF 16 BIT
        let bitArray = Array.new(32);
        let bitArray[0] = 1; // 0000000000000001
        let bitArray[1] = 2; // 0000000000000010
        let bitArray[2] = 4; // 0000000000000100
        let bitArray[3] = 8; // 0000000000001000
        let bitArray[4] = 16; // 0000000000010000
        let bitArray[5] = 32; // 0000000000100000
        let bitArray[6] = 64; // 0000000001000000
        let bitArray[7] = 128; // 0000000010000000
        let bitArray[8] = 256; // 0000000100000000
        let bitArray[9] = 512; // 0000001000000000
        let bitArray[10] = 1024; // 0000010000000000
        let bitArray[11] = 2048; // 0000100000000000
        let bitArray[12] = 4096; // 0001000000000000
        let bitArray[13] = 8192; // 0010000000000000
        let bitArray[14] = 16384; // 0100000000000000
        let bitArray[15] = 16384 + 16384; // 1000000000000000
        let bitArray[16] = bitArray[15]+bitArray[15]; 
        let bitArray[17] = bitArray[16]+bitArray[16];
        let bitArray[18] = bitArray[17]+bitArray[17];
        let bitArray[19] = bitArray[18]+bitArray[18];
        let bitArray[20] = bitArray[19]+bitArray[19];
        let bitArray[21] = bitArray[20]+bitArray[20];
        let bitArray[22] = bitArray[21]+bitArray[21];
        let bitArray[23] = bitArray[22]+bitArray[22];
        let bitArray[24] = bitArray[23]+bitArray[23];
        let bitArray[25] = bitArray[24]+bitArray[24];
        let bitArray[26] = bitArray[25]+bitArray[25];
        let bitArray[27] = bitArray[26]+bitArray[26];
        let bitArray[28] = bitArray[27]+bitArray[27];
        let bitArray[29] = bitArray[28]+bitArray[28];
        let bitArray[30] = bitArray[29]+bitArray[29];
        let bitArray[31] = bitArray[30]+bitArray[30];

        // FURTHER bitArray[16 .. 32] NEED TO BE ADDED for 32 BIT SYSTEM
        return;
    }

    /** Returns if jth bit of x is 1 */
    function boolean bit(int x, int j){
        return ~((x & bitArray[j]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var int sum, shiftedX,j;

        let sum = 0;
        let shiftedX = x;
        let j = 0;

        // NOTE: NEED TO BE MODIFIED TO 32 BIT INSTEAD OF 16 BIT
        while(j < 32){
            if(Math.bit(y,j)){ // if jth bit of y is 1
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX; // shiftedX = shiftedX * 2
            let j = j + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
        var int q,result;
        var boolean pos;

        let pos = ((x < 0) = (y < 0));

        let x = Math.abs(x);
        let y = Math.abs(y);

        if(y > x){
            return 0;
        }

        let q = Math.divide(x,y + y); // recursive call
        
        if((x - (2 * q * y)) < y){ // 
            let result = q + q;
        }else{
            let result = q + q + 1;
        }

        if(pos){ // to assign sign to the result
            return result;
        }else{
            return -result;
        }

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,temp,tempQ;

        let y = 0;

        // j = 7 for 16 bit system
        // NEED TO BE MODIFIED TO 32 BIT SYSTEM WHERE j = 15
        let j = 7;


        while(~(j < 0)){ // while j >= 0
            let temp = y + bitArray[j];
            let tempQ = temp * temp;
            //avoid overflow
            if(~(tempQ > x) & (tempQ > 0)){
                let y = temp;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){
            return a;
        }
        return b;
    }

    /** helper function: mod */
    function int mod(int a, int b){
        return a - (Math.divide(a,b) * b); 
    }

    /** helper function two to the power i i.e. 2^i */
    function int twoToThe(int i){
        return bitArray[i];
    }
}
